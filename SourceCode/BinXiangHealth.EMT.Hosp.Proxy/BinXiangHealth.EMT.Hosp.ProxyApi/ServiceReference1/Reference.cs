//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//
//     对此文件的更改可能导致不正确的行为，并在以下条件下丢失:
//     代码重新生成。
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.4")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="AppServiceCommonSoap")]
public interface AppServiceCommonSoap
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TestConn", ReplyAction="*")]
    [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
    System.Threading.Tasks.Task<string> TestConnAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DoTrans", ReplyAction="*")]
    [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
    System.Threading.Tasks.Task<string> DoTransAsync(string transCode, string inJsonString);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExChangeDeptInfo", ReplyAction="*")]
    [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
    System.Threading.Tasks.Task<string> ExChangeDeptInfoAsync(string inJsonString);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExChangeEmployeeInfo", ReplyAction="*")]
    [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
    System.Threading.Tasks.Task<string> ExChangeEmployeeInfoAsync(string inJsonString);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.4")]
public interface AppServiceCommonSoapChannel : AppServiceCommonSoap, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.4")]
public partial class AppServiceCommonSoapClient : System.ServiceModel.ClientBase<AppServiceCommonSoap>, AppServiceCommonSoap
{
    
    /// <summary>
    /// 实现此分部方法，配置服务终结点。
    /// </summary>
    /// <param name="serviceEndpoint">要配置的终结点</param>
    /// <param name="clientCredentials">客户端凭据</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
    
    public AppServiceCommonSoapClient(EndpointConfiguration endpointConfiguration) : 
            base(AppServiceCommonSoapClient.GetBindingForEndpoint(endpointConfiguration), AppServiceCommonSoapClient.GetEndpointAddress(endpointConfiguration))
    {
        this.Endpoint.Name = endpointConfiguration.ToString();
        ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }
    
    public AppServiceCommonSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
            base(AppServiceCommonSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
    {
        this.Endpoint.Name = endpointConfiguration.ToString();
        ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }
    
    public AppServiceCommonSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(AppServiceCommonSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
    {
        this.Endpoint.Name = endpointConfiguration.ToString();
        ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }
    
    public AppServiceCommonSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public System.Threading.Tasks.Task<string> TestConnAsync()
    {
        return base.Channel.TestConnAsync();
    }
    
    public System.Threading.Tasks.Task<string> DoTransAsync(string transCode, string inJsonString)
    {
        return base.Channel.DoTransAsync(transCode, inJsonString);
    }
    
    public System.Threading.Tasks.Task<string> ExChangeDeptInfoAsync(string inJsonString)
    {
        return base.Channel.ExChangeDeptInfoAsync(inJsonString);
    }
    
    public System.Threading.Tasks.Task<string> ExChangeEmployeeInfoAsync(string inJsonString)
    {
        return base.Channel.ExChangeEmployeeInfoAsync(inJsonString);
    }
    
    public virtual System.Threading.Tasks.Task OpenAsync()
    {
        return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
    }
    
    public virtual System.Threading.Tasks.Task CloseAsync()
    {
        return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
    }
    
    private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
    {
        if ((endpointConfiguration == EndpointConfiguration.AppServiceCommonSoap))
        {
            System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
            result.MaxBufferSize = int.MaxValue;
            result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
            result.MaxReceivedMessageSize = int.MaxValue;
            result.AllowCookies = true;
            return result;
        }
        if ((endpointConfiguration == EndpointConfiguration.AppServiceCommonSoap12))
        {
            System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
            System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
            textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
            result.Elements.Add(textBindingElement);
            System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
            httpBindingElement.AllowCookies = true;
            httpBindingElement.MaxBufferSize = int.MaxValue;
            httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
            result.Elements.Add(httpBindingElement);
            return result;
        }
        throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
    }
    
    private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
    {
        if ((endpointConfiguration == EndpointConfiguration.AppServiceCommonSoap))
        {
            return new System.ServiceModel.EndpointAddress("http://192.168.0.186:8085/AppServiceCommon.asmx");
        }
        if ((endpointConfiguration == EndpointConfiguration.AppServiceCommonSoap12))
        {
            return new System.ServiceModel.EndpointAddress("http://192.168.0.186:8085/AppServiceCommon.asmx");
        }
        throw new System.InvalidOperationException(string.Format("找不到名称为“{0}”的终结点。", endpointConfiguration));
    }
    
    public enum EndpointConfiguration
    {
        
        AppServiceCommonSoap,
        
        AppServiceCommonSoap12,
    }
}
